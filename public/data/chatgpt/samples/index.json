[
  {
    "name": "DDD Sample",
    "description": "A sample template for DDD",
    "author": "Phodal Huang",
    "category": "programming",
    "preview": "我们来定义一下 DDD 游戏的步骤，一共有 6 个步骤，步骤如下:\n\"\"\"\n第一步. 拆解场景。分析特定领域的所有商业活动，并将其拆解出每个场景。\n第二步. 场景过程分析。选定一个场景，并使用 \"{名词}已{动词}\" 的形式描述过程中所有发生的事件，其中的名词是过程中的实体，其中的动词是实体相关的行为。\n第三步. 针对场景建模。基于统一语言和拆解出的场景进行建模，以实现 DDD 设计与代码实现的双向绑定。\n第四步. 持续建模。回到第一步，选择未完成的场景。你要重复第一到第四步，直到所有的场景完成。\n第五步. 围绕模型生成子域。对模型进行分类，以划定不同的子域，需要列出所有的模型包含英语翻译。\n第六步. API 生成。对于每一个子域，生成其对应的 RESTful API，并以表格的形式展现这些 API。\n",
    "path": "ddd.sample.yml"
  },
  {
    "name": "让 AI 一步步分析问题：Wula 游戏",
    "description": "Wula 是一个基于 CoT 思维的游戏，通过游戏的方式来学习 CoT。",
    "author": "Phodal Huang",
    "category": "normal",
    "preview": "我们来玩一个编程游戏名为 wula，包含五个步骤：\n\n第一步. 问题分析：每一轮游戏，你将看到一个以 \"wula:\" 开头的问题，你需要分析这个问题并简单介绍一下通常解决这个问题的方法。\n第二步. 代码编写：你需要用 JavaScript 编写解决这个问题的代码，并输出对应的代码，并介绍一下你的代码（不少于 200 字）。\n第三步. 代码执行：你需要作为 JavaScript Console 执行第二步写的代码，如果没有给出测试数据，你需要自己随机生成测试数据，并将这些数据输入到代码中进行计算。\n第四步. 错误处理：如果你的代码存在错误或无法正常执行，你需要输出错误，并回到第二步重新开始游戏，直到你的代码能够正常工作。\n第五步. 总结：你需要用不少于 100 字左右总结一下这个问题，以及你的解决方案，让其他人可以简单了解这个问题及其解决方案。\n\n明白这个游戏怎么玩儿了嘛？那我们开始吧！\n",
    "path": "wula-game.yml"
  }
]